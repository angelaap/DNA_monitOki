summary<-data$`Series-History`
event2019<- nrow(IP2019_detail)
event2018<- nrow(IP2018_detail)
event2020<- nrow(IP2020_detail)
online<- nrow(R_detail)
event2019
event2018
event2020
online
posit<- summary %>% mutate(fstudents=Students/Attendance) %>% mutate(fPostDocs=PostDocs/Attendance)
rest<- posit %>% mutate(rest=1-(fstudents+fPostDocs))
clean<- rest  %>% filter(grepl("R2020|IP2020|IP2019|IP2018", ID)) %>% select(ID, fstudents, fPostDocs,rest)
long <- melt(clean, id.vars = c("ID"))
re2020<- long %>% filter(grepl("R2020", ID))
IPd2020<- long %>% filter(grepl("IP2020", ID))
IPd2019<- long %>% filter(grepl("IP2019", ID))
IPd2018<- long %>% filter(grepl("IP2018", ID))
#First R2020
#lets make the donut charts first with the re2020
re2020$ymax <- cumsum(re2020$value)
# Compute the bottom of each rectangle
re2020$ymin <- c(0, head(re2020$ymax, n=-1))
# Compute label position
re2020$labelPosition <- (re2020$ymax + re2020$ymin) / 2
# Make the plot
donut20200r<- ggplot(re2020, aes(ymax=ymax, ymin=ymin, xmax=4, xmin=3, fill=variable)) +
geom_rect() +
geom_label( x=3.5, aes(y=labelPosition, label=round(value, digits=2)), size=6) +
scale_fill_brewer(palette=4) +
coord_polar(theta="y") +
xlim(c(2, 4)) +
theme_void() +
theme(legend.position = "none")+
labs(title = "Online 2020")+
scale_fill_manual(values = c("#D33B44", "#42858C", "#DFE07C"))
#IP2020
IPd2020$ymax <- cumsum(IPd2020$value)
IPd2020$ymin <- c(0, head(IPd2020$ymax, n=-1))
IPd2020$labelPosition <- (IPd2020$ymax + IPd2020$ymin) / 2
donut2020IP<- ggplot(IPd2020, aes(ymax=ymax, ymin=ymin, xmax=4, xmin=3, fill=variable)) +
geom_rect() +
geom_label( x=3.5, aes(y=labelPosition, label=round(value, digits=2)), size=6) +
scale_fill_brewer(palette=4) +
coord_polar(theta="y") +
xlim(c(2, 4)) +
theme_void() +
theme(legend.position = "none")+
labs(title = "IP 2020")+
scale_fill_manual(values = c("#D33B44", "#42858C", "#DFE07C"))
#IP2019
IPd2019$ymax <- cumsum(IPd2019$value)
IPd2019$ymin <- c(0, head(IPd2019$ymax, n=-1))
IPd2019$labelPosition <- (IPd2019$ymax + IPd2019$ymin) / 2
donut2019IP<- ggplot(IPd2019, aes(ymax=ymax, ymin=ymin, xmax=4, xmin=3, fill=variable)) +
geom_rect() +
geom_label( x=3.5, aes(y=labelPosition, label=round(value, digits=2)), size=6) +
scale_fill_brewer(palette=4) +
coord_polar(theta="y") +
xlim(c(2, 4)) +
theme_void() +
theme(legend.position = "none")+
labs(title = "IP 2019") +
scale_fill_manual(values = c("#D33B44", "#42858C", "#DFE07C"))
#IP2018
IPd2018$ymax <- cumsum(IPd2018$value)
IPd2018$ymin <- c(0, head(IPd2018$ymax, n=-1))
IPd2018$labelPosition <- (IPd2018$ymax + IPd2018$ymin) / 2
donut2018IP<- ggplot(IPd2018, aes(ymax=ymax, ymin=ymin, xmax=4, xmin=3, fill=variable)) +
geom_rect() +
geom_label( x=3.5, aes(y=labelPosition, label=round(value, digits=2)), size=6) +
scale_fill_brewer(palette=4) +
coord_polar(theta="y") +
xlim(c(2, 4)) +
theme_void() +
labs(title = "IP 2018")+
labs(fill = "Position", labels = c("Students", "PostDocs", "Others"))+
scale_fill_manual(values = c("#D33B44", "#42858C", "#DFE07C"))
donut20200r
donut2020IP
donut2019IP
donut2018IP
R_detail$event <- "Online"
IP2019_detail$event <- "IP2019"
IP2018_detail$event <- "IP2018"
IP2020_detail$event <- "IP2020"
#delete column 11 from IP events
IP2019_detail$MeetingLocation <- NULL
IP2018_detail$MeetingLocation <- NULL
IP2020_detail$MeetingLocation<- NULL
#join tables
total_part<- rbind(R_detail, IP2019_detail, IP2018_detail, IP2020_detail)
#calculate percentages by gender at each event
gender <- total_part %>%
group_by(event,Gender)%>%
dplyr::summarise(n = n()) %>%
mutate(Freq = n/sum(n))
ggplot(gender, aes(fill=Gender, y= Freq, x= event)) +
scale_fill_manual(values = c("#1d3554", "#D33B44", "#42858C"))+
geom_bar(position="dodge", stat="identity") +
ggtitle("Participants by gender") +
theme_bw()+
theme(text = element_text(size=14))
world <- map_data("world")
head(world)
#Table participants
events<- c("IP2018", "IP2019", "IP2020", "Online")
Nparticipants<- c(374, 325, 285, 842)
Ncountries<- c(34, 34, 30, 67)
Participation<- data.frame(events, Nparticipants, Ncountries)
colnames(Participation)<- c("Event", "Nº Participants", "Nº Countries")
knitr::kable(Participation, format = "pipe", caption = "Participation in each conference", align = "lcc")
#making a simple map
worldplot <- ggplot() +
geom_polygon(data = world, aes(x=long, y = lat, group = group), colour = "black", size = 0.1) +
coord_fixed(1.3)
#Now let's clean the list and keep only two columns
rownames(R_countries) <- NULL
colnames(R_countries)<- c("Country", "Count", "%")
R_countries<- R_countries[-1,]
maptest <- select(R_countries, region = Country, "rate" = `%`)
head(maptest)
#check if the name of the countries is the same
#Check for disagreements between the two datasets
diff <- setdiff(world$region, maptest$region)
#It seems only the Democratic Republic of the Congo is different
## Clean the dataset accordingly
maptest <- maptest %>%
## Recod certain entries
mutate(region = recode(str_trim(region),
"Congo, Democratic Republic of the" = "Democratic Republic of the Congo"))
## Make the rate numeric
maptest$rate <- as.numeric(as.character(maptest$rate))
#merge the map by region
worldSubset <- left_join(world, maptest, by = "region")
head(worldSubset)
#plot the final map: remote
## First, let's ditch many of the unnecessary elements
plain <- theme(
axis.text = element_blank(),
axis.line = element_blank(),
axis.ticks = element_blank(),
panel.border = element_blank(),
panel.grid = element_blank(),
axis.title = element_blank(),
panel.background = element_rect(fill = "white"),
plot.title = element_text(hjust = 0.5)
)
remotemap <- ggplot(data = worldSubset, mapping = aes(x = long, y = lat, group = group)) +
coord_fixed(1.3) +
geom_polygon(aes(fill = rate),colour = "black", size = 0.1) +
scale_fill_distiller(palette ="RdYlGn", direction = -1, na.value = "grey95") + # or direction=1
#scale_colour_gradientn(colours = terrain.colors(10))+
ggtitle("% of attendance online conference") +
plain
#IP2020
## we first need to get the frequencies from this event
IP2020_count<- IP2020_detail%>%
group_by(Country)%>%
count()
colnames(IP2020_count)<- c("Country","num")
IP2020_countries<- mutate(IP2020_count, percent= num/event2020)
maptest <- IP2020_countries %>%
select(Country, percent)
colnames(maptest)<- c("region","rate")
head(maptest)
#check if the name of the countries is the same
## Check for disagreements between the two datasets
diff <- setdiff(world$region, maptest$region)
#It seems only the Democratic Republic of the Congo is different
## Clean the dataset accordingly
maptest <- maptest %>%
## Recode certain entries
mutate(region = recode(str_trim(region),
"Congo, Democratic Republic of the" = "Democratic Republic of the Congo"))
## Make the rate numeric
maptest$rate <- as.numeric(as.character(maptest$rate))
#merge the map by region
worldSubset <- left_join(world, maptest, by = "region")
head(worldSubset)
#plot the final map
IP2020 <- ggplot(data = worldSubset, mapping = aes(x = long, y = lat, group = group)) +
coord_fixed(1.3) +
geom_polygon(aes(fill = rate),colour = "black", size = 0.1) +
scale_fill_distiller(palette ="RdYlGn", direction = -1, na.value = "grey95")  +
ggtitle("% of attendance in person conference 2020") +
plain
#IP2019
#Now let's clean the list and keep only two columns
rownames(IP2019_countries) <- NULL
colnames(IP2019_countries)<- c("Country", "Count", "%")
IP2019_countries<- IP2019_countries[-1,]
maptest <- select(IP2019_countries, region = Country, "rate" = `%`)
head(maptest)
#check if the name of the countries is the same
## Check for disagreements between the two datasets
diff <- setdiff(world$region, maptest$region)
#It seems only the Democratic Republic of the Congo is different
## Clean the dataset accordingly
maptest <- maptest %>%
## Recode certain entries
mutate(region = recode(str_trim(region),
"Congo, Democratic Republic of the" = "Democratic Republic of the Congo"))
## Make the rate numeric
maptest$rate <- as.numeric(as.character(maptest$rate))
#merge the map by region
worldSubset <- left_join(world, maptest, by = "region")
head(worldSubset)
#plot the final map
IP2019 <- ggplot(data = worldSubset, mapping = aes(x = long, y = lat, group = group)) +
coord_fixed(1.3) +
geom_polygon(aes(fill = rate),colour = "black", size = 0.1) +
scale_fill_distiller(palette ="RdYlGn", direction = -1, na.value = "grey95")  +
ggtitle("% of attendance in person conference 2019") +
plain
#IP2018
rownames(IP2018_countries) <- NULL
colnames(IP2019_countries)<- c("Country", "Count", "%")
IP2018_countries<- IP2018_countries[-1,]
maptest <- select(IP2018_countries, region = Country, "rate" = `%`)
head(maptest)
#check if the name of the countries is the same
## Check for disagreements between the two datasets
diff <- setdiff(world$region, maptest$region)
#It seems only the Democratic Republic of the Congo is different
## Clean the dataset accordingly
maptest <- maptest %>%
## Recode certain entries
mutate(region = recode(str_trim(region),
"Congo, Democratic Republic of the" = "Democratic Republic of the Congo"))
## Make the rate numeric
maptest$rate <- as.numeric(as.character(maptest$rate))
#merge the map by region
worldSubset <- left_join(world, maptest, by = "region")
head(worldSubset)
#plot the final map
IP2018 <- ggplot(data = worldSubset, mapping = aes(x = long, y = lat, group = group)) +
coord_fixed(1.3) +
geom_polygon(aes(fill = rate),colour = "black", size = 0.1) +
scale_fill_distiller(palette ="RdYlGn", direction = -1, na.value = "grey95")  +
ggtitle("% of attendance in person conference 2018") +
plain
#Check the maps
remotemap
IP2020
IP2019
IP2018
#first calculation is done with the Travel footprint calculator by directly input the spreadsheet that Kate prepared in the webpage.
#get the data
IP2018CO2<- read.csv("~/Documents/GitHub/FlightCarbon_Academia22/Results from Didier_Fairmont_2018 mtng_2021-11-24_04_27_01_3c5b.csv")
IP2019CO2<- read.csv("~/Documents/GitHub/FlightCarbon_Academia22/Results from Didier_Banff_2019 mtng_2021-11-24_03_46_08_8463.csv")
IP2020CO2<- read.csv("~/Documents/GitHub/FlightCarbon_Academia22/Results from Didier_Santa Fe_2020 mtng_2022-01-10_00_35_52_3a44.csv")
IP2018CO2$event<- c("IP2018")
IP2019CO2$event<- c("IP2019")
IP2020CO2$event<- c("IP2020")
FlightTC<- rbind(IP2018CO2, IP2019CO2, IP2020CO2)
#total emmissions per event
TotalCO2flight<- FlightTC %>%
group_by(event) %>%
summarise(totalco2=sum(co2_kg))
kable(TotalCO2flight, caption="Total kg of CO2e calculated with Travel Footprint calculator")
#calculation of the Co2e emmited per trip
# first remove the rows with "inf" instead of values
histogramprep<- FlightTC %>%
mutate(OneTrip=co2_kg/plane.trips_amount)
clean_total_co2<- histogramprep %>%
filter(!grepl("Inf", OneTrip))
ALlprephisto<- clean_total_co2%>%
group_by(event) %>%
mutate(cumm=cumsum(co2_kg))%>%
arrange(cumm)
#only for IP2020
IP2020_emission <-  ALlprephisto%>%
filter(event == "IP2020")%>%
arrange(OneTrip)%>%
arrange(cumm)
# Value used to transform the data
coeff <- 20000
ggplot(ALlprephisto, aes(x=co2_kg)) +
geom_bar(aes(y=plane.trips_amount),stat='identity', color="#1d3554", size=1)+
geom_line(aes(y=cumm/coeff), size=0.5, color="#D33B44")+
scale_y_continuous(name = "Plane Trips",sec.axis = sec_axis( trans=~.*coeff, name="Cummulative CO2 emissions (kg)"))+
facet_wrap(~event)+
theme_bw()
#Total server-related emissions per event
duration2020<- 21
#duration2022<-
Watts<- 300
Conversion<- 1/1000
Cintensity<- 0.439
#Calculation: Total number of hours X Watts X 1/1,000 kW W-1 X carbon emissions intensity (kg kWh-1 CO2e)
server2020<- duration2020*Watts*Conversion*Cintensity
server2020 #in Kg CO2e?
#Total network-related emissions per event
Viewers2020<- 842
Mbps<- 1.2
elecGiga<- 0.06
#Calculation: number of hours X number of participants X data rate (Mbps)X 3,600 s h-1 X ⅛ byte bit -1 X 1/1,024 GB MB-1 X 0.06 kWh GB-1 X carbon emissions intensity (kg kWh-1 CO2e)
network2020<- duration2020*Viewers2020*Mbps*3600*1/8*1/1024*elecGiga*Cintensity
network2020
Elec_laptop<- 30
user_emis<- duration2020*Viewers2020*Elec_laptop*1/1000*Cintensity
user_emis
event<- c("Virtual meeting 2020", "Hibrid meeting 2022")
server_emissions<- c(server2020, "not yet")
network_emsissions<- c(network2020, "not yet")
user_device<- c(user_emis, "not yet")
remote_emissions <- data.frame(event, server_emissions, network_emsissions, user_device)
colnames(remote_emissions)<- c("Event", "Server", "Network", "User device")
knitr::kable(remote_emissions, format = "pipe", digits= 2, caption = "Emissions derived from online connections (in kg CO2e)", align = "lccc")
#for some reason I cannot reduce the number of decimals displayed and the format of the table
multiplesheets <- function(fname) {
# getting info about all excel sheets
sheets <- readxl::excel_sheets(fname)
tibble <- lapply(sheets, function(x) readxl::read_excel(fname, sheet = x))
data_frame <- lapply(tibble, as.data.frame)
# assigning names to data frames
names(data_frame) <- sheets
# print data frame
print(data_frame)
}
# specifying the path name
path <- "~/Documents/GitHub/FlightCarbon_Academia22/TBmtgs-geographic data_deID_29Nov2021.xlsx"
data<- multiplesheets(path)
R_countries<-data$`EK10-2021`
R_detail<-data$`EK10-21detail`
IP2019_countries<-data$`A3-2019`
IP2019_detail<-data$`A3-19detail`
IP2018_countries<-data$`X7-2018`
IP2018_detail<-data$`X7-18detail`
IP2020_detail<-data$`A2-2020detail`
summary<-data$`Series-History`
world <- map_data("world")
head(world)
#Table participants
events<- c("IP2018", "IP2019", "IP2020", "Online")
Nparticipants<- c(374, 325, 285, 842)
Ncountries<- c(34, 34, 30, 67)
Participation<- data.frame(events, Nparticipants, Ncountries)
colnames(Participation)<- c("Event", "Nº Participants", "Nº Countries")
knitr::kable(Participation, format = "pipe", caption = "Participation in each conference", align = "lcc")
#making a simple map
worldplot <- ggplot() +
geom_polygon(data = world, aes(x=long, y = lat, group = group), colour = "black", size = 0.1) +
coord_fixed(1.3)
#Now let's clean the list and keep only two columns
rownames(R_countries) <- NULL
colnames(R_countries)<- c("Country", "Count", "%")
R_countries<- R_countries[-1,]
maptest <- select(R_countries, region = Country, "rate" = `%`)
head(maptest)
#check if the name of the countries is the same
#Check for disagreements between the two datasets
diff <- setdiff(world$region, maptest$region)
#It seems only the Democratic Republic of the Congo is different
## Clean the dataset accordingly
maptest <- maptest %>%
## Recod certain entries
mutate(region = recode(str_trim(region),
"Congo, Democratic Republic of the" = "Democratic Republic of the Congo"))
## Make the rate numeric
maptest$rate <- as.numeric(as.character(maptest$rate))
#merge the map by region
worldSubset <- left_join(world, maptest, by = "region")
head(worldSubset)
#plot the final map: remote
## First, let's ditch many of the unnecessary elements
plain <- theme(
axis.text = element_blank(),
axis.line = element_blank(),
axis.ticks = element_blank(),
panel.border = element_blank(),
panel.grid = element_blank(),
axis.title = element_blank(),
panel.background = element_rect(fill = "white"),
plot.title = element_text(hjust = 0.5)
)
remotemap <- ggplot(data = worldSubset, mapping = aes(x = long, y = lat, group = group)) +
coord_fixed(1.3) +
geom_polygon(aes(fill = rate),colour = "black", size = 0.1) +
scale_fill_distiller(palette ="RdYlGn", direction = -1, na.value = "grey95") + # or direction=1
#scale_colour_gradientn(colours = terrain.colors(10))+
ggtitle("% of attendance online conference") +
plain
#IP2020
## we first need to get the frequencies from this event
IP2020_count<- IP2020_detail%>%
group_by(Country)%>%
count()
colnames(IP2020_count)<- c("Country","num")
IP2020_countries<- mutate(IP2020_count, percent= num/event2020)
maptest <- IP2020_countries %>%
select(Country, percent)
colnames(maptest)<- c("region","rate")
head(maptest)
#check if the name of the countries is the same
## Check for disagreements between the two datasets
diff <- setdiff(world$region, maptest$region)
#It seems only the Democratic Republic of the Congo is different
## Clean the dataset accordingly
maptest <- maptest %>%
## Recode certain entries
mutate(region = recode(str_trim(region),
"Congo, Democratic Republic of the" = "Democratic Republic of the Congo"))
## Make the rate numeric
maptest$rate <- as.numeric(as.character(maptest$rate))
#merge the map by region
worldSubset <- left_join(world, maptest, by = "region")
head(worldSubset)
#plot the final map
IP2020 <- ggplot(data = worldSubset, mapping = aes(x = long, y = lat, group = group)) +
coord_fixed(1.3) +
geom_polygon(aes(fill = rate),colour = "black", size = 0.1) +
scale_fill_distiller(palette ="RdYlGn", direction = -1, na.value = "grey95")  +
ggtitle("% of attendance in person conference 2020") +
plain
#IP2019
#Now let's clean the list and keep only two columns
rownames(IP2019_countries) <- NULL
colnames(IP2019_countries)<- c("Country", "Count", "%")
IP2019_countries<- IP2019_countries[-1,]
maptest <- select(IP2019_countries, region = Country, "rate" = `%`)
head(maptest)
#check if the name of the countries is the same
## Check for disagreements between the two datasets
diff <- setdiff(world$region, maptest$region)
#It seems only the Democratic Republic of the Congo is different
## Clean the dataset accordingly
maptest <- maptest %>%
## Recode certain entries
mutate(region = recode(str_trim(region),
"Congo, Democratic Republic of the" = "Democratic Republic of the Congo"))
## Make the rate numeric
maptest$rate <- as.numeric(as.character(maptest$rate))
#merge the map by region
worldSubset <- left_join(world, maptest, by = "region")
head(worldSubset)
#plot the final map
IP2019 <- ggplot(data = worldSubset, mapping = aes(x = long, y = lat, group = group)) +
coord_fixed(1.3) +
geom_polygon(aes(fill = rate),colour = "black", size = 0.1) +
scale_fill_distiller(palette ="RdYlGn", direction = -1, na.value = "grey95")  +
ggtitle("% of attendance in person conference 2019") +
plain
#IP2018
rownames(IP2018_countries) <- NULL
colnames(IP2019_countries)<- c("Country", "Count", "%")
IP2018_countries<- IP2018_countries[-1,]
maptest <- select(IP2018_countries, region = Country, "rate" = `%`)
head(maptest)
#check if the name of the countries is the same
## Check for disagreements between the two datasets
diff <- setdiff(world$region, maptest$region)
#It seems only the Democratic Republic of the Congo is different
## Clean the dataset accordingly
maptest <- maptest %>%
## Recode certain entries
mutate(region = recode(str_trim(region),
"Congo, Democratic Republic of the" = "Democratic Republic of the Congo"))
## Make the rate numeric
maptest$rate <- as.numeric(as.character(maptest$rate))
#merge the map by region
worldSubset <- left_join(world, maptest, by = "region")
head(worldSubset)
#plot the final map
IP2018 <- ggplot(data = worldSubset, mapping = aes(x = long, y = lat, group = group)) +
coord_fixed(1.3) +
geom_polygon(aes(fill = rate),colour = "black", size = 0.1) +
scale_fill_distiller(palette ="RdYlGn", direction = -1, na.value = "grey95")  +
ggtitle("% of attendance in person conference 2018") +
plain
#Check the maps
remotemap
IP2020
IP2019
IP2018
#Total server-related emissions per event
duration2020<- 21
#duration2022<-
Watts<- 300
Conversion<- 1/1000
Cintensity<- 0.439
#Calculation: Total number of hours X Watts X 1/1,000 kW W-1 X carbon emissions intensity (kg kWh-1 CO2e)
server2020<- duration2020*Watts*Conversion*Cintensity
server2020 #in Kg CO2e?
ggplot(ALlprephisto, aes(x=co2_kg)) +
geom_bar(aes(y=plane.trips_amount),stat='identity', color="#1d3554", size=1)+
geom_line(aes(y=cumm/coeff), size=0.5, color="#D33B44")+
scale_y_continuous(name = "Plane Trips",sec.axis = sec_axis( trans=~.*coeff, name="Cummulative CO2 emissions (kg)"))+
facet_wrap(~event)+
theme(axis.line.y = element_line(color = "#D33B44"),
axis.text.y.right = element_text(color = "#D33B44"))+
theme_bw()
ggplot(ALlprephisto, aes(x=co2_kg)) +
geom_bar(aes(y=plane.trips_amount),stat='identity', color="#1d3554", size=1)+
geom_line(aes(y=cumm/coeff), size=0.5, color="#D33B44")+
scale_y_continuous(name = "Plane Trips",sec.axis = sec_axis( trans=~.*coeff, name="Cummulative CO2 emissions (kg)"))+
facet_wrap(~event)+
theme(axis.line.y.right = element_line(color = "red"),
axis.ticks.y.right = element_line(color = "red"))
ggplot(ALlprephisto, aes(x=co2_kg)) +
geom_bar(aes(y=plane.trips_amount),stat='identity', color="#1d3554", size=1)+
geom_line(aes(y=cumm/coeff), size=0.5, color="#D33B44")+
scale_y_continuous(name = "Plane Trips",sec.axis = sec_axis( trans=~.*coeff, name="Cummulative CO2 emissions (kg)"))+
facet_wrap(~event)+
theme(axis.text.y.right = element_line(color = "#D33B44"))
ggplot(ALlprephisto, aes(x=co2_kg)) +
geom_bar(aes(y=plane.trips_amount),stat='identity', color="#1d3554", size=1)+
geom_line(aes(y=cumm/coeff), size=0.5, color="#D33B44")+
scale_y_continuous(name = "Plane Trips",sec.axis = sec_axis( trans=~.*coeff, name="Cummulative CO2 emissions (kg)"))+
facet_wrap(~event)+
theme(axis.text.y.right = element_line(color = "red"),
axis.ticks.y.right = element_line(color = "red"))
